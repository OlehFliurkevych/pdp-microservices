services:
  micro-collector:
    container_name: collector
    build: micro-collector
    image: micro-collector
    ports:
      - "8080:8080"
    networks:
      - recipient
    environment:
      - RABBITMQ_GET_REMOVE_ALL_FIX_DELAY=15000
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - EUREKA_PREFER_IP=true
      - POSTGRES_URL=postgres:5432/postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    depends_on:
      micro-recipient:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
  micro-recipient:
    container_name: recipient
    build: micro-recipient
    image: micro-recipient
    ports:
      - "8081:8081"
    networks:
      - recipient
    environment:
      - RABBITMQ_PORT=5672
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_QUEUE_NAME=amq_notification_queue
      - RABBITMQ_EXCHANGE_NAME=amq_notification_exchange
      - RABBITMQ_ROUTING_KEY=amq_notification_routing_key
      - RABBITMQ_CONSUMER_FIX_DELAY=1000
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - EUREKA_PREFER_IP=true
    healthcheck:
      test: curl -f http://localhost:8081/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    depends_on:
      micro-sender:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
  micro-sender:
    container_name: sender
    build: micro-sender
    image: micro-sender
    ports:
      - "8082:8082"
    networks:
      - sender
    environment:
      - RABBITMQ_PORT=5672
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_QUEUE_NAME=amq_notification_queue
      - RABBITMQ_EXCHANGE_NAME=amq_notification_exchange
      - RABBITMQ_ROUTING_KEY=amq_notification_routing_key
      - RABBITMQ_PRODUCER_FIX_DELAY=1000
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - EUREKA_PREFER_IP=true
    healthcheck:
      test: curl -f http://localhost:8082/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - recipient
      - sender
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
  eureka:
    container_name: eureka
    build: eureka-service
    image: eureka
    ports:
      - "8761:8761"
    networks:
      - recipient
      - sender
    healthcheck:
      test: curl -f http://localhost:8761 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    depends_on:
      micro-sender:
        condition: service_healthy
      micro-recipient:
        condition: service_healthy
      micro-collector:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - recipient
      - sender
      - metrics
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - metrics
  postgres:
    image: postgres
    ports:
      - "5432:5432"
    networks:
      - recipient
    environment:
      - POSTGRES_PASSWORD=postgres
  micro-visualizer:
    container_name: visualizer
    build: micro-visualizer
    image: micro-visualizer
    ports:
      - "8083:8083"
    networks:
      - recipient
    environment:
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - EUREKA_PREFER_IP=true
      - POSTGRES_URL=postgres:5432/postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: curl -f http://localhost:8083/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m
    deploy:
      restart_policy:
        condition: on-failure
networks:
  sender: { }
  recipient: { }
  metrics: { }
